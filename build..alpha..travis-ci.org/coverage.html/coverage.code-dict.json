{"/home/travis/build/npmtest/node-npmtest-sntp/test.js":"/* istanbul instrument in package npmtest_sntp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sntp/lib.npmtest_sntp.js":"/* istanbul instrument in package npmtest_sntp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sntp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sntp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sntp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sntp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sntp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sntp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sntp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_sntp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sntp.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_sntp.__dirname +\n                    '/lib.npmtest_sntp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sntp/node_modules/sntp/lib/index.js":"'use strict';\n\n// Load modules\n\nconst Dgram = require('dgram');\nconst Dns = require('dns');\nconst Hoek = require('hoek');\n\n\n// Declare internals\n\nconst internals = {};\n\n\nexports.time = function (options, callback) {\n\n    if (arguments.length !== 2) {\n        callback = arguments[0];\n        options = {};\n    }\n\n    const settings = Hoek.clone(options);\n    settings.host = settings.host || 'pool.ntp.org';\n    settings.port = settings.port || 123;\n    settings.resolveReference = settings.resolveReference || false;\n\n    // Declare variables used by callback\n\n    let timeoutId = 0;\n    let sent = 0;\n\n    // Ensure callback is only called once\n\n    const finish = Hoek.once((err, result) => {\n\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n            timeoutId = 0;\n        }\n\n        socket.removeAllListeners();\n        socket.once('error', Hoek.ignore);\n        socket.close();\n        return callback(err, result);\n    });\n\n    // Create UDP socket\n\n    const socket = Dgram.createSocket('udp4');\n\n    socket.once('error', (err) => finish(err));\n\n    // Listen to incoming messages\n\n    socket.on('message', (buffer, rinfo) => {\n\n        const received = Date.now();\n\n        const message = new internals.NtpMessage(buffer);\n        if (!message.isValid) {\n            return finish(new Error('Invalid server response'), message);\n        }\n\n        if (message.originateTimestamp !== sent) {\n            return finish(new Error('Wrong originate timestamp'), message);\n        }\n\n        // Timestamp Name          ID   When Generated\n        // ------------------------------------------------------------\n        // Originate Timestamp     T1   time request sent by client\n        // Receive Timestamp       T2   time request received by server\n        // Transmit Timestamp      T3   time reply sent by server\n        // Destination Timestamp   T4   time reply received by client\n        //\n        // The roundtrip delay d and system clock offset t are defined as:\n        //\n        // d = (T4 - T1) - (T3 - T2)     t = ((T2 - T1) + (T3 - T4)) / 2\n\n        const T1 = message.originateTimestamp;\n        const T2 = message.receiveTimestamp;\n        const T3 = message.transmitTimestamp;\n        const T4 = received;\n\n        message.d = (T4 - T1) - (T3 - T2);\n        message.t = ((T2 - T1) + (T3 - T4)) / 2;\n        message.receivedLocally = received;\n\n        if (!settings.resolveReference ||\n            message.stratum !== 'secondary') {\n\n            return finish(null, message);\n        }\n\n        // Resolve reference IP address\n\n        Dns.reverse(message.referenceId, (err, domains) => {\n\n            if (/* $lab:coverage:off$ */ !err /* $lab:coverage:on$ */) {\n                message.referenceHost = domains[0];\n            }\n\n            return finish(null, message);\n        });\n    });\n\n    // Set timeout\n\n    if (settings.timeout) {\n        timeoutId = setTimeout(() => {\n\n            timeoutId = 0;\n            return finish(new Error('Timeout'));\n        }, settings.timeout);\n    }\n\n    // Construct NTP message\n\n    const message = new Buffer(48);\n    for (let i = 0; i < 48; ++i) {                      // Zero message\n        message[i] = 0;\n    }\n\n    message[0] = (0 << 6) + (4 << 3) + (3 << 0);        // Set version number to 4 and Mode to 3 (client)\n    sent = Date.now();\n    internals.fromMsecs(sent, message, 40);             // Set transmit timestamp (returns as originate)\n\n    // Send NTP request\n\n    socket.send(message, 0, message.length, settings.port, settings.host, (err, bytes) => {\n\n        if (err ||\n            bytes !== 48) {\n\n            return finish(err || new Error('Could not send entire message'));\n        }\n    });\n};\n\n\ninternals.NtpMessage = function (buffer) {\n\n    this.isValid = false;\n\n    // Validate\n\n    if (buffer.length !== 48) {\n        return;\n    }\n\n    // Leap indicator\n\n    const li = (buffer[0] >> 6);\n    switch (li) {\n        case 0: this.leapIndicator = 'no-warning'; break;\n        case 1: this.leapIndicator = 'last-minute-61'; break;\n        case 2: this.leapIndicator = 'last-minute-59'; break;\n        case 3: this.leapIndicator = 'alarm'; break;\n    }\n\n    // Version\n\n    const vn = ((buffer[0] & 0x38) >> 3);\n    this.version = vn;\n\n    // Mode\n\n    const mode = (buffer[0] & 0x7);\n    switch (mode) {\n        case 1: this.mode = 'symmetric-active'; break;\n        case 2: this.mode = 'symmetric-passive'; break;\n        case 3: this.mode = 'client'; break;\n        case 4: this.mode = 'server'; break;\n        case 5: this.mode = 'broadcast'; break;\n        case 0:\n        case 6:\n        case 7: this.mode = 'reserved'; break;\n    }\n\n    // Stratum\n\n    const stratum = buffer[1];\n    if (stratum === 0) {\n        this.stratum = 'death';\n    }\n    else if (stratum === 1) {\n        this.stratum = 'primary';\n    }\n    else if (stratum <= 15) {\n        this.stratum = 'secondary';\n    }\n    else {\n        this.stratum = 'reserved';\n    }\n\n    // Poll interval (msec)\n\n    this.pollInterval = Math.round(Math.pow(2, buffer[2])) * 1000;\n\n    // Precision (msecs)\n\n    this.precision = Math.pow(2, buffer[3]) * 1000;\n\n    // Root delay (msecs)\n\n    const rootDelay = 256 * (256 * (256 * buffer[4] + buffer[5]) + buffer[6]) + buffer[7];\n    this.rootDelay = 1000 * (rootDelay / 0x10000);\n\n    // Root dispersion (msecs)\n\n    this.rootDispersion = ((buffer[8] << 8) + buffer[9] + ((buffer[10] << 8) + buffer[11]) / Math.pow(2, 16)) * 1000;\n\n    // Reference identifier\n\n    this.referenceId = '';\n    switch (this.stratum) {\n        case 'death':\n        case 'primary':\n            this.referenceId = String.fromCharCode(buffer[12]) + String.fromCharCode(buffer[13]) + String.fromCharCode(buffer[14]) + String.fromCharCode(buffer[15]);\n            break;\n        case 'secondary':\n            this.referenceId = '' + buffer[12] + '.' + buffer[13] + '.' + buffer[14] + '.' + buffer[15];\n            break;\n    }\n\n    // Reference timestamp\n\n    this.referenceTimestamp = internals.toMsecs(buffer, 16);\n\n    // Originate timestamp\n\n    this.originateTimestamp = internals.toMsecs(buffer, 24);\n\n    // Receive timestamp\n\n    this.receiveTimestamp = internals.toMsecs(buffer, 32);\n\n    // Transmit timestamp\n\n    this.transmitTimestamp = internals.toMsecs(buffer, 40);\n\n    // Validate\n\n    if (this.version === 4 &&\n        this.stratum !== 'reserved' &&\n        this.mode === 'server' &&\n        this.originateTimestamp &&\n        this.receiveTimestamp &&\n        this.transmitTimestamp) {\n\n        this.isValid = true;\n    }\n\n    return this;\n};\n\n\ninternals.toMsecs = function (buffer, offset) {\n\n    let seconds = 0;\n    let fraction = 0;\n\n    for (let i = 0; i < 4; ++i) {\n        seconds = (seconds * 256) + buffer[offset + i];\n    }\n\n    for (let i = 4; i < 8; ++i) {\n        fraction = (fraction * 256) + buffer[offset + i];\n    }\n\n    return ((seconds - 2208988800 + (fraction / Math.pow(2, 32))) * 1000);\n};\n\n\ninternals.fromMsecs = function (ts, buffer, offset) {\n\n    const seconds = Math.floor(ts / 1000) + 2208988800;\n    const fraction = Math.round((ts % 1000) / 1000 * Math.pow(2, 32));\n\n    buffer[offset + 0] = (seconds & 0xFF000000) >> 24;\n    buffer[offset + 1] = (seconds & 0x00FF0000) >> 16;\n    buffer[offset + 2] = (seconds & 0x0000FF00) >> 8;\n    buffer[offset + 3] = (seconds & 0x000000FF);\n\n    buffer[offset + 4] = (fraction & 0xFF000000) >> 24;\n    buffer[offset + 5] = (fraction & 0x00FF0000) >> 16;\n    buffer[offset + 6] = (fraction & 0x0000FF00) >> 8;\n    buffer[offset + 7] = (fraction & 0x000000FF);\n};\n\n\n// Offset singleton\n\ninternals.last = {\n    offset: 0,\n    expires: 0,\n    host: '',\n    port: 0\n};\n\n\nexports.offset = function (options, callback) {\n\n    if (arguments.length !== 2) {\n        callback = arguments[0];\n        options = {};\n    }\n\n    const now = Date.now();\n    const clockSyncRefresh = options.clockSyncRefresh || 24 * 60 * 60 * 1000;                    // Daily\n\n    if (internals.last.offset &&\n        internals.last.host === options.host &&\n        internals.last.port === options.port &&\n        now < internals.last.expires) {\n\n        process.nextTick(() => callback(null, internals.last.offset));\n        return;\n    }\n\n    exports.time(options, (err, time) => {\n\n        if (err) {\n            return callback(err, 0);\n        }\n\n        internals.last = {\n            offset: Math.round(time.t),\n            expires: now + clockSyncRefresh,\n            host: options.host,\n            port: options.port\n        };\n\n        return callback(null, internals.last.offset);\n    });\n};\n\n\n// Now singleton\n\ninternals.now = {\n    intervalId: 0\n};\n\n\nexports.start = function (options, callback) {\n\n    if (arguments.length !== 2) {\n        callback = arguments[0];\n        options = {};\n    }\n\n    if (internals.now.intervalId) {\n        process.nextTick(() => callback());\n        return;\n    }\n\n    exports.offset(options, (ignoreErr, offset) => {\n\n        internals.now.intervalId = setInterval(() => {\n\n            exports.offset(options, Hoek.ignore);\n        }, options.clockSyncRefresh || 24 * 60 * 60 * 1000);                                // Daily\n\n        return callback();\n    });\n};\n\n\nexports.stop = function () {\n\n    if (!internals.now.intervalId) {\n        return;\n    }\n\n    clearInterval(internals.now.intervalId);\n    internals.now.intervalId = 0;\n};\n\n\nexports.isLive = function () {\n\n    return !!internals.now.intervalId;\n};\n\n\nexports.now = function () {\n\n    const now = Date.now();\n    if (!exports.isLive() ||\n        now >= internals.last.expires) {\n\n        return now;\n    }\n\n    return now + internals.last.offset;\n};\n"}